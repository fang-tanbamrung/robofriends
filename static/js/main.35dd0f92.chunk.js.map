{"version":3,"sources":["serviceWorker.js","components/Cards.js","components/Cardlist.js","components/searchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Cards","_ref","id","name","email","react_default","a","createElement","className","style","width","alt","src","concat","Cardlist","robots","card","map","user","i","components_Cards","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","overflowX","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","robotSearch","filter","robot","toLowerCase","includes","toUpperCase","searchBox","components_Scroll","components_Cardlist","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddeleware","ReactDOM","render","react_redux_es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35dd0f92.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Cards = ({id, name, email}) => {\r\n    return (\r\n        <div className='flex'>\r\n            <div style={{width:'300px'}} className='bg-light-silver dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img alt=\"robots\" src={`https://robohash.org/${id}?200*200`} />\r\n                <div>\r\n                    <h1>{name}</h1>\r\n                    <p>{email}</p>\r\n                </div>\r\n                    \r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport Cards from './Cards';\r\n\r\nconst Cardlist = ({robots}) => {\r\n    const card = robots.map((user,i) => {\r\n        return <Cards key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    })\r\n    return(\r\n        <div className=''>\r\n            <div className='ma3 flex'>\r\n                {card}\r\n                {/* <Cards id={robots[0].id} name={robots[0].name} email={robots[0].email} /> */}\r\n    \r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Cardlist","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n            className='bg-light-blue pa1 br3 ba b--blue shadow-1 mb2'\r\n            type='search' \r\n            placeholder='search name of robots'\r\n            onChange={searchChange}\r\n            />\r\n            {/* {console.log(searchChange)} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(<div style={{overflowX:'scroll',border:'1px solid black'\r\n    ,height:'550px'}} >  \r\n        {props.children}\r\n    </div>)\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/searchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport {setSearchField,requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        searchField:state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange,robots,isPending} = this.props;\r\n        const robotSearch = robots.filter(robot => {\r\n            // return robot.name.toLocaleUpperCase().includes(this)\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending?\r\n            <h1>Loading...</h1>\r\n        :\r\n            \r\n            <div className='tc'>\r\n                <h1 className='robofriends'>{'robofriends'.toUpperCase()}</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                {/* {console.log(typeof(this.onSearchChange))} */}\r\n                <Scroll>\r\n                    <Cardlist robots={robotSearch}/>\r\n                </Scroll>\r\n                \r\n                {/* {console.log(typeof(this.state.robots))} */}\r\n            </div>\r\n            \r\n        \r\n}\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n        } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n        .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED,payload:err}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n        } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n    \r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots:action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error:action.payload, isPending:false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddeleware from 'redux-thunk';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport './index.css';\r\nimport 'tachyons';\r\n\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddeleware));\r\n\r\nReactDOM.render(<Provider store = {store}>\r\n                        <App/> \r\n                </Provider>\r\n        , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}